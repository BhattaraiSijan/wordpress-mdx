import React from 'react';
import {
  cleanup,
  screen,
  waitForElementToBeRemoved
} from '@testing-library/react';
import { renderToString } from 'react-dom/server';

import { renderWithTheme } from '../../../test/_setup-theme-provider';

import {
  GlobalLoadingProvider,
  showGlobalLoading,
  showGlobalLoadingMessage,
  hideGlobalLoading
} from '.';

// this is just a little hack to silence a warning that we'll get until we
// upgrade to 16.9. See also: https://github.com/facebook/react/pull/14853
const originalError = console.error;
beforeAll(() => {
  console.error = (...args) => {
    if (/Warning.*not wrapped in act/.test(args[0])) {
      return;
    }
    originalError.call(console, ...args);
  };
});

afterAll(() => {
  console.error = originalError;
  cleanup();
});

// eslint-disable-next-line react/prop-types
function MountLoader({ minTime, children }) {
  return (
    <React.Fragment>
      <GlobalLoadingProvider minTime={minTime} />
      {children}
    </React.Fragment>
  );
}

describe('<GlobalLoading />', () => {
  it('should not set body overflow-y when global loading not revealed', () => {
    renderWithTheme(<MountLoader />);
    const bodyStyles = window.getComputedStyle(document.body);
    expect(bodyStyles['overflow-y']).toBe('');
  });

  it('should set body overflow-y when global loading revealed', async () => {
    renderWithTheme(<MountLoader />);
    await showGlobalLoading();

    const bodyStyles = window.getComputedStyle(document.body);
    expect(bodyStyles['overflow-y']).toBe('hidden');
  });

  it('should render a global loading', async () => {
    const renderedComponent = renderWithTheme(<MountLoader />);
    await showGlobalLoading();
    expect(renderedComponent.baseElement).toMatchSnapshot();
  });

  it('should render a global loading with a message', async () => {
    const renderedComponent = renderWithTheme(<MountLoader />);
    await showGlobalLoadingMessage('Test message');
    expect(renderedComponent.baseElement).toMatchSnapshot();
  });

  it('should respect multiple calls to showGlobalLoading', async () => {
    const originalDate = global.Date.now;

    const renderedComponent = renderWithTheme(<MountLoader minTime={1} />);
    global.Date.now = () => 0;
    await showGlobalLoading();
    await showGlobalLoading();
    expect(screen.getByTestId('global-loading')).not.toBeNull();
    global.Date.now = () => 1000;
    hideGlobalLoading();
    expect(screen.getByTestId('global-loading')).not.toBeNull();

    global.Date.now = () => 2000;
    await hideGlobalLoading();
    await waitForElementToBeRemoved(screen.getByTestId('global-loading'));
    expect(renderedComponent.baseElement).toMatchSnapshot();

    global.Date.now = originalDate;
  });

  it('renders SSR compatible <GlobalLoadingProvider />', () => {
    const renderOnServer = () => renderToString(<MountLoader />);
    expect(renderOnServer).not.toThrow();
  });
});
