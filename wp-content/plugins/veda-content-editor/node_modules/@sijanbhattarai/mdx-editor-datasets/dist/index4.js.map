{"version":3,"file":"index4.js","sources":["../src/datasets.js"],"sourcesContent":["const datasetsForVedaProvider = {\n  \"lpjeosim-wetlandch4-grid-v1\": {\n    id: \"lpjeosim-wetlandch4-grid-v1\",\n    data: {\n      id: \"lpjeosim-wetlandch4-grid-v1\",\n      name: \"Wetland Methane Emissions, LPJ-EOSIM Model (Minimal)\",\n      description: \"Global monthly and daily 0.5 degree resolution estimates of wetland methane emissions from the LPJ-EOSIM model, version 1\",\n      usage: [], media: {}, taxonomy: [], infoDescription: \"Minimal description for LPJ-EOSIM dataset.\",\n      layers: [\n        {\n          id: 'ch4-wetlands-emissions-m-ens',\n          stacCol: 'lpjeosim-wetlandch4-monthgrid-v1',\n          name: '(Monthly) Ensemble Mean Wetland CH₄ Emissions LPJ-EOSIM Model',\n          type: 'raster',\n          description: 'Monthly CH₄ emissions from wetlands constructed using an ensemble of climate forcing data sources input to the LPJ-EOSIM model (mean of ERA5 and MERRA-2 layers)',\n          initialDatetime: 'newest',\n          projection: { id: 'equirectangular' },\n          zoomExtent: [0, 20],\n          sourceParams: { assets: 'ensemble-mean-ch4-wetlands-emissions', colormap_name: 'magma', rescale: [0, 3e-9] },\n          compare: { datasetId: 'lpjeosim-wetlandch4-grid-v1', layerId: 'ch4-wetlands-emissions-m-ens', mapLabel: \"::js ({ dateFns, datetime, compareDatetime }) => { if (dateFns && datetime && compareDatetime) return `${dateFns.format(datetime, 'LLLraquinone')} VS ${dateFns.format(compareDatetime, 'LLLraquinone')}`; }\" },\n          legend: { unit: { label: 'kg CH₄/m²/s' }, type: 'gradient', min: 0, max: 3e-9, stops: [\"#2c115f\", \"#721f81\", \"#b73779\", \"#f1605d\", \"#feb078\"] },\n          analysis: { metrics: [\"mean\"], sourceParams: { dst_crs: \"+proj=cea\" } },\n          info: { source: \"NASA\", spatialExtent: \"Global\", temporalResolution: \"Monthly\", unit: \"kg CH₄/m²/s\" },\n          params_config: [\n            {\n              id: 'datetime',\n              name: 'Date',\n              type: 'datetime',\n              domain: [], \n              default: 'newest'\n            }\n          ],\n          sources: []\n        }\n        // Ensure all layers from lpjeosim that might be used by Scrollytelling are fully defined here\n      ]\n    }\n  },\n  \"sandbox\": {\n    id: \"sandbox\",\n    data: {\n      id: \"sandbox\",\n      name: \"Sandbox Dataset (for MapBlock Preview)\",\n      description: \"Dataset for testing MapBlock previews.\",\n      usage: [], media: {}, taxonomy: [], infoDescription: \"Sandbox dataset.\",\n      layers: [\n        {\n          id: 'nightlights-hd-monthly', // Layer used in your initialContent\n          stacCol: 'some-dummy-stac-collection-nightlights',\n          name: 'HD Nightlights Monthly (Preview)',\n          type: 'raster',\n          description: 'Monthly HD Nightlights for preview.',\n          initialDatetime: '2020-03-01T00:00:00Z',\n          projection: { id: 'equirectangular' },\n          zoomExtent: [0, 18],\n          sourceParams: { assets: 'cog_default', colormap_name: 'viridis', rescale: [0, 100] },\n          legend: { unit: { label: 'Radiance' }, type: 'gradient', min: 0, max: 100, stops: [\"#000004\", \"#3B0F70\", \"#8C2981\", \"#DE4968\", \"#FE9F6D\", \"#FCFDBF\"] },\n          mapLabel: 'HD Nightlights Preview',\n          compare: { datasetId: 'sandbox', layerId: 'nightlights-hd-monthly', mapLabel: \"Comparison View\" },\n          analysis: { metrics: [\"mean\"], sourceParams: { dst_crs: \"+proj=cea\" } },\n          info: { source: \"Mock Data\", spatialExtent: \"Global\", temporalResolution: \"Monthly\", unit: \"nW/cm²/sr\" },\n          params_config: [\n            {\n              id: 'datetime',\n              name: 'Observation Date',\n              type: 'datetime',\n              domain: ['2020-01-01T00:00:00Z', '2020-12-31T23:59:59Z'], \n              default: '2020-03-01T00:00:00Z' \n            }\n          ],\n          sources: []\n        },\n        {\n          id: 'no2-monthly', \n          stacCol: 'no2-monthly-diff',\n          name: 'NO₂ Monthly Layer (Preview)',\n          type: 'raster',\n          description: 'Monthly NO₂ levels for preview.',\n          initialDatetime: '2020-01-01T00:00:00Z',\n          projection: { id: 'equirectangular' },\n          zoomExtent: [0, 20],\n          sourceParams: { assets: 'cog_default', colormap_name: 'rdbu_r', rescale: [-8e15, 8e15] },\n          legend: { unit: { label: 'NO₂ Level (ppb)' }, type: 'gradient', min: -8e15, max: 8e15, stops: [\"#67001F\", \"#B2182B\", \"#D6604D\", \"#F4A582\", \"#FDDBC7\", \"#F7F7F7\", \"#D1E5F0\", \"#92C5DE\", \"#4393C3\", \"#2166AC\", \"#053061\"] },\n          mapLabel: 'NO₂ Monthly (Sandbox Preview)',\n          compare: { datasetId: 'sandbox', layerId: 'no2-monthly', mapLabel: \"Comparison\" },\n          analysis: { metrics: [\"mean\"], sourceParams: { dst_crs: \"+proj=cea\" } },\n          info: { source: \"Mock Source\", spatialExtent: \"Global\", temporalResolution: \"Monthly\", unit: \"ppb\" },\n          params_config: [\n            {\n              id: 'datetime',\n              name: 'Observation Date',\n              type: 'datetime',\n              domain: ['2020-01-01T00:00:00Z', '2020-12-31T23:59:59Z'],\n              default: '2020-01-01T00:00:00Z'\n            }\n          ],\n          sources: []\n        }\n      ]\n    }\n  }\n};\n\nexport default datasetsForVedaProvider;\n"],"names":["datasetsForVedaProvider"],"mappings":"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"}